// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  // WARNING: The database URL is hardcoded below due to a persistent issue
  // with environment variable loading in the monorepo setup. 
  // Ideally, this should use `env("DATABASE_URL")` once the root cause is fixed.
  url      = "postgresql://user:password@localhost:5432/nutridb?schema=public"
}

enum Role {
  OWNER
  CLIENT
}

model Food {
  id            String     @id @default(cuid())
  name          String
  protein       Float      // por 100g
  carbohydrates Float      // por 100g
  fat           Float      // por 100g
  calories      Float      // por 100g
  source        FoodSource @default(GLOBAL)

  // Micronutrientes (opcionales, por 100g)
  // Vitaminas
  vitaminA      Float? // µg
  vitaminC      Float? // mg
  vitaminD      Float? // µg
  vitaminE      Float? // mg
  vitaminK      Float? // µg
  vitaminB1     Float? // mg (Tiamina)
  vitaminB2     Float? // mg (Riboflavina)
  vitaminB3     Float? // mg (Niacina)
  vitaminB6     Float? // mg (Piridoxina)
  vitaminB9     Float? // µg (Folato)
  vitaminB12    Float? // µg (Cobalamina)
  vitaminB5     Float? // mg (Ácido pantoténico)
  vitaminB7     Float? // µg (Biotina)
  choline       Float? // mg

  // Minerales
  calcium       Float? // mg
  chloride      Float? // mg
  chromium      Float? // µg
  copper        Float? // µg
  fluoride      Float? // mg
  iodine        Float? // µg
  iron          Float? // mg
  magnesium     Float? // mg
  manganese     Float? // mg
  molybdenum    Float? // µg
  phosphorus    Float? // mg
  potassium     Float? // mg
  selenium      Float? // µg
  zinc          Float? // mg

  // Relación para alimentos personalizados creados por usuarios (OWNER)
  creatorId     String?
  creator       User?      @relation(fields: [creatorId], references: [id])

  foodLogs      FoodLog[]

  createdAt     DateTime   @default(now()) @db.Timestamp(6)
  updatedAt     DateTime   @updatedAt @db.Timestamp(6)

  @@unique([name, creatorId])
}

enum FoodSource {
  GLOBAL // De la base de datos precargada
  CUSTOM // Creado por un usuario
}

enum Sex {
  MALE
  FEMALE
}

model FoodLog {
  id        String   @id @default(cuid())
  date      DateTime @db.Date
  quantity  Float // in grams
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  food   Food @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId String
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  password           String
  name               String?
  age                Int?
  sex                Sex?      
  role               Role      @default(OWNER)
  subscriptionStatus String    @default("trialing")
  trialEndsAt        DateTime? @db.Timestamp(6)
  createdAt          DateTime  @default(now()) @db.Timestamp(6)
  updatedAt          DateTime  @updatedAt @db.Timestamp(6)

  // Relación Owner-Client
  ownerId            String?   // Para que un cliente apunte a su owner
  owner              User?     @relation("OwnerClients", fields: [ownerId], references: [id])
  clients            User[]    @relation("OwnerClients") // Para que un owner tenga una lista de clientes

  createdFoods       Food[]    // Alimentos personalizados creados por el usuario
  foodLogs           FoodLog[]

  profiles           Profile[]
}

model Profile {
  id        String   @id @default(cuid())
  name      String
  age       Int
  sex       Sex 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String
}

model RecommendedDailyAllowance {
  id        String @id @default(cuid())
  nutrient  String // e.g., "VITAMIN_A", "CALCIUM"
  ageGroup  String // e.g., "4-8", "14-18", "19-50", "71+"
  sex       Sex?   // MALE, FEMALE, or null if it applies to both
  value     Float  // The recommended value
  unit      String // e.g., "µg", "mg"

  @@unique([nutrient, ageGroup, sex])
}
